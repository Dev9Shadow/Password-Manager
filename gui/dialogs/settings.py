"""
Dialog des param√®tres de l'application
"""

import tkinter as tk
from tkinter import Toplevel, Label, Canvas
from customtkinter import CTkButton, CTkFrame, CTkLabel, CTkSwitch, CTkOptionMenu
from PIL import ImageTk, Image

from config.settings import COLORS, WINDOW_CONFIG, IMAGES_DIR, MESSAGES
from utils.geometry import GeometryUtils
from gui.widgets.custom_widgets import ModernCard, ModernButton, ModernLabel, show_success, show_error
from gui.dialogs.master_password import MasterPasswordDialog, MasterPasswordVerificationDialog
from core.database import DatabaseManager

class SettingsDialog:
    """Dialog des param√®tres de l'application"""
    
    def __init__(self, parent, on_settings_changed=None):
        self.parent = parent
        self.on_settings_changed = on_settings_changed
        self.db_manager = DatabaseManager()
        
        self.dialog = None
        self.theme_var = tk.StringVar(value="dark")
        self.auto_lock_var = tk.BooleanVar(value=False)
        self.clipboard_timeout_var = tk.StringVar(value="30")
        
        self._create_dialog()
        self._setup_ui()
    
    def _create_dialog(self):
        """Cr√©er la fen√™tre de dialogue"""
        self.dialog = Toplevel(self.parent, bg=COLORS['primary_bg'])
        config = WINDOW_CONFIG['settings']
        GeometryUtils.apply_window_config(self.dialog, config)
        
        # Ic√¥ne et titre de la fen√™tre
        self.dialog.iconbitmap() if hasattr(self.dialog, 'iconbitmap') else None
    
    def _setup_ui(self):
        """Configurer l'interface utilisateur"""
        self._create_header()
        self._create_security_section()
        self._create_appearance_section()
        self._create_clipboard_section()
        self._create_action_buttons()
    
    def _create_header(self):
        """Cr√©er l'en-t√™te du dialog"""
        # Titre principal
        title_label = ModernLabel(
            self.dialog,
            text="‚öôÔ∏è Param√®tres",
            style="title"
        )
        title_label.place(x=30, y=20)
        
        # Ligne d√©corative
        line = Canvas(
            self.dialog,
            width=440,
            height=2,
            bg=COLORS['line_color'],
            highlightthickness=0
        )
        line.place(x=30, y=60)
    
    def _create_security_section(self):
        """Cr√©er la section s√©curit√©"""
        # Card pour la s√©curit√©
        security_card = ModernCard(self.dialog, width=440, height=120)
        security_card.place(x=30, y=80)
        
        # Titre de section
        security_title = ModernLabel(
            security_card,
            text="üîí S√©curit√©",
            style="subtitle"
        )
        security_title.place(x=20, y=15)
        
        # Bouton changer mot de passe ma√Ætre
        change_master_btn = ModernButton(
            security_card,
            text="Changer le mot de passe ma√Ætre",
            command=self._change_master_password,
            width=200,
            height=35
        )
        change_master_btn.place(x=20, y=50)
        
        # Switch pour verrouillage automatique
        auto_lock_label = ModernLabel(
            security_card,
            text="Verrouillage automatique :",
            style="primary"
        )
        auto_lock_label.place(x=240, y=55)
        
        auto_lock_switch = CTkSwitch(
            security_card,
            text="",
            variable=self.auto_lock_var,
            width=40,
            height=20,
            switch_width=40,
            switch_height=20,
            fg_color=COLORS['button_secondary'],
            progress_color=COLORS['button_primary']
        )
        auto_lock_switch.place(x=380, y=55)
    
    def _create_appearance_section(self):
        """Cr√©er la section apparence"""
        # Card pour l'apparence
        appearance_card = ModernCard(self.dialog, width=440, height=80)
        appearance_card.place(x=30, y=220)
        
        # Titre de section
        appearance_title = ModernLabel(
            appearance_card,
            text="üé® Apparence",
            style="subtitle"
        )
        appearance_title.place(x=20, y=15)
        
        # Label th√®me
        theme_label = ModernLabel(
            appearance_card,
            text="Th√®me :",
            style="primary"
        )
        theme_label.place(x=20, y=45)
        
        # Menu d√©roulant pour le th√®me
        theme_menu = CTkOptionMenu(
            appearance_card,
            values=["Sombre", "Clair", "Automatique"],
            variable=self.theme_var,
            width=120,
            height=30,
            fg_color=COLORS['button_secondary'],
            button_color=COLORS['button_primary'],
            button_hover_color=COLORS['button_hover']
        )
        theme_menu.place(x=80, y=42)
    
    def _create_clipboard_section(self):
        """Cr√©er la section presse-papiers"""
        # Card pour le presse-papiers
        clipboard_card = ModernCard(self.dialog, width=440, height=80)
        clipboard_card.place(x=30, y=320)
        
        # Titre de section
        clipboard_title = ModernLabel(
            clipboard_card,
            text="üìã Presse-papiers",
            style="subtitle"
        )
        clipboard_title.place(x=20, y=15)
        
        # Label timeout
        timeout_label = ModernLabel(
            clipboard_card,
            text="Effacement automatique :",
            style="primary"
        )
        timeout_label.place(x=20, y=45)
        
        # Menu d√©roulant pour le timeout
        timeout_menu = CTkOptionMenu(
            clipboard_card,
            values=["10 sec", "30 sec", "60 sec", "5 min", "Jamais"],
            variable=self.clipboard_timeout_var,
            width=100,
            height=30,
            fg_color=COLORS['button_secondary'],
            button_color=COLORS['button_primary'],
            button_hover_color=COLORS['button_hover']
        )
        timeout_menu.place(x=180, y=42)
    
    def _create_action_buttons(self):
        """Cr√©er les boutons d'action"""
        # Bouton Sauvegarder
        save_btn = ModernButton(
            self.dialog,
            text="üíæ Sauvegarder",
            command=self._save_settings,
            style="success",
            width=120
        )
        save_btn.place(x=220, y=420)
        
        # Bouton Annuler
        cancel_btn = ModernButton(
            self.dialog,
            text="‚ùå Annuler",
            command=self._close,
            style="secondary",
            width=120
        )
        cancel_btn.place(x=350, y=420)
        
        # Bouton √Ä propos
        about_btn = ModernButton(
            self.dialog,
            text="‚ÑπÔ∏è √Ä propos",
            command=self._show_about,
            style="secondary",
            width=120
        )
        about_btn.place(x=30, y=420)
    
    def _change_master_password(self):
        """Changer le mot de passe ma√Ætre"""
        def on_verification_success():
            """Callback appel√© apr√®s v√©rification r√©ussie"""
            dialog = MasterPasswordDialog(self.dialog, self._on_master_password_changed)
            dialog.show()
        
        # D'abord v√©rifier l'ancien mot de passe
        verification_dialog = MasterPasswordVerificationDialog(
            self.dialog, 
            on_verification_success,
            "V√©rification - Ancien mot de passe"
        )
        verification_dialog.show()
    
    def _on_master_password_changed(self):
        """Callback appel√© quand le mot de passe ma√Ætre est chang√©"""
        show_success(self.dialog, "Mot de passe ma√Ætre modifi√© avec succ√®s !")
    
    def _save_settings(self):
        """Sauvegarder les param√®tres"""
        try:
            # Ici vous pouvez sauvegarder les param√®tres dans un fichier de config
            # ou dans la base de donn√©es
            
            settings = {
                'theme': self.theme_var.get(),
                'auto_lock': self.auto_lock_var.get(),
                'clipboard_timeout': self.clipboard_timeout_var.get()
            }
            
            print(f"Sauvegarde des param√®tres : {settings}")
            
            # Callback pour informer la fen√™tre parent
            if self.on_settings_changed:
                self.on_settings_changed(settings)
            
            show_success(self.dialog, "Param√®tres sauvegard√©s avec succ√®s !")
            
        except Exception as e:
            print(f"Erreur lors de la sauvegarde : {e}")
            show_error(self.dialog, "Erreur lors de la sauvegarde des param√®tres")
    
    def _show_about(self):
        """Afficher les informations √† propos"""
        about_text = """üîê Password Vault v1.0

                    Gestionnaire s√©curis√© de mots de passe

                    D√©velopp√© avec :
                    ‚Ä¢ Python 3.x
                    ‚Ä¢ CustomTkinter
                    ‚Ä¢ SQLite3
                    ‚Ä¢ Cryptography

                    ¬© 2024 - Tous droits r√©serv√©s"""
        
        # Cr√©er une fen√™tre √† propos
        about_dialog = Toplevel(self.dialog, bg=COLORS['primary_bg'])
        about_dialog.title("√Ä propos")
        about_dialog.geometry("400x300")
        about_dialog.resizable(False, False)
        
        # Centrer sur le parent
        about_dialog.geometry(GeometryUtils.center_on_parent(self.dialog, 400, 300))
        
        # Contenu
        about_label = ModernLabel(
            about_dialog,
            text=about_text,
            style="primary"
        )
        about_label.place(x=50, y=50)
        
        # Bouton fermer
        close_btn = ModernButton(
            about_dialog,
            text="Fermer",
            command=about_dialog.destroy,
            width=100
        )
        close_btn.place(x=150, y=250)
        
        about_dialog.grab_set()  # Modal
    
    def _close(self):
        """Fermer le dialogue"""
        self.dialog.destroy()
    
    def show(self):
        """Afficher le dialogue"""
        self.dialog.grab_set()  # Modal
        self.dialog.wait_window()